import threading
import json

from mpu6050 import mpu6050
from math import atan2

import evdev

from time import sleep, time
from adafruit_servokit import ServoKit


BACK_RIGHT_LEG=14
BACK_RIGHT_SHOULDER=12
BACK_RIGHT_FOOT=13

BACK_LEFT_LEG=2
BACK_LEFT_SHOULDER=1
BACK_LEFT_FOOT=0

FRONT_RIGHT_LEG=10
FRONT_RIGHT_SHOULDER=8
FRONT_RIGHT_FOOT=9

FRONT_LEFT_LEG=4
FRONT_LEFT_SHOULDER=5
FRONT_LEFT_FOOT=6

INPUT_DEVICE="/dev/input/event0"


all_run=True

gyro_front = 0.
gyro_side = 0.
gyro_time = 0.
gyro_lock = threading.Lock()

spot_gamepadmotion=None
spot_gamepadmotionlock = threading.Lock()


def spotgyro():
    global gyro_front, gyro_side, gyro_time, gyro_lock, all_run

    while all_run:

        gyro=None

        while gyro == None:
            try:
                gyro=mpu6050(0x68)
            except:
                raise Exception("Could not connect to Gyroscope MPU6050")

            sleep(1)


        angleFront=0.
        angleSide=0.

        while True:

            start=time()

            try:
                accelval = gyro.get_accel_data()
                gyroval = gyro.get_gyro_data()

                gyro_lock.acquire()
                gyro_front=0.80*(angleFront+float(gyroval['y'])*0.01/131) + 0.20*atan2(accelval['x'],accelval['z'])*180/3.14159
                gyro_side=0.80*(angleSide+float(gyroval['x'])*0.01/131) + 0.20*atan2(accelval['y'],accelval['z'])*180/3.14159
                gyro_time=time()
                gyro_lock.release()

            except Exception:
                pass

            stop=time()

            if stop-start < 0.05:
                sleep(stop-start)


def update_gamepadmotion(event):
    global spot_gamepadmotion, spot_gamepadmotionlock

    spot_gamepadmotionlock.acquire()
    spot_gamepadmotion=event
    spot_gamepadmotionlock.release()

def spotgamepad():
    
    while all_run:

        try:
            gamepad=evdev.InputDevice(INPUT_DEVICE)

            for event in gamepad.read_loop():
                if event.type == evdev.ecodes.EV_ABS:
                    absevent = evdev.categorize(event)

                    # If motion button
                    if evdev.ecodes.bytype[absevent.event.type][absevent.event.code] == 'ABS_HAT0Y':
                        code = absevent.event.value

                        if code == -1:
                            update_gamepadmotion('forward')
                        elif code == 1:
                            update_gamepadmotion('backward')
                        else:
                            update_gamepadmotion(None)

                    if evdev.ecodes.bytype[absevent.event.type][absevent.event.code] == 'ABS_HAT0X':
                        code = absevent.event.value

                        if code == -1:
                            update_gamepadmotion('left')
                        elif code == 1:
                            update_gamepadmotion('right')
                        else:
                            update_gamepadmotion(None)


                    # If body position joystick
                    if evdev.ecodes.bytype[absevent.event.type][absevent.event.code] == 'ABS_X':
                        if absevent.event.value < 128:
                            update_gamepadmotion('bodyleft')
                        elif absevent.event.value > 128:
                            update_gamepadmotion('bodyright')
                        else:
                            update_gamepadmotion(None)

                    if evdev.ecodes.bytype[absevent.event.type][absevent.event.code] == 'ABS_Y':
                        if absevent.event.value < 128:
                            update_gamepadmotion('bodyfront')
                        elif absevent.event.value > 128:
                            update_gamepadmotion('bodyback')
                        else:
                            update_gamepadmotion(None)



                    # If camera position joystick
                    if evdev.ecodes.bytype[absevent.event.type][absevent.event.code] == 'ABS_Z':
                        print('lateral camera: ' + str(absevent.event.value))

                    if evdev.ecodes.bytype[absevent.event.type][absevent.event.code] == 'ABS_RZ':
                        print('front camera: ' + str(absevent.event.value))


                # If action button
                if event.type == evdev.ecodes.EV_KEY:
                    keyevent = evdev.categorize(event)

                    # Laydown
                    if 'BTN_A' in evdev.ecodes.bytype[keyevent.event.type][keyevent.event.code]:
                        if keyevent.event.value == 0:
                            update_gamepadmotion('laydown')

                    # Wake up
                    if 'BTN_Y' in evdev.ecodes.bytype[keyevent.event.type][keyevent.event.code]:
                        if keyevent.event.value == 0:
                            update_gamepadmotion('wakeup')

            

        except:
            update_gamepadmotion(None)






def signal_handler(sig, frame):
    global all_run
    print('Bye Bye')
    all_run=False



class Spot():

    def __init__(self):
        self.corrections = [0, 0, 0, 0, -7, -3, 2, 0, 5, 0, 7, 0, 0, 0, 0, 0]
        self.positions = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

        self.servos = ServoKit(channels=16)



        for i in range(16):
            self.servos.servo[i].set_pulse_width_range(500 , 2500)


        # Start position
        self.movepart(FRONT_LEFT_SHOULDER, 90)
        self.movepart(BACK_RIGHT_SHOULDER, 90)
        self.movepart(FRONT_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)

        self.movepart(FRONT_RIGHT_FOOT, 170)
        self.movepart(FRONT_LEFT_FOOT, 170)
        self.movepart(BACK_RIGHT_FOOT, 170)
        self.movepart(BACK_LEFT_FOOT, 170)

        self.movepart(BACK_LEFT_LEG, 140)
        self.movepart(FRONT_LEFT_LEG, 140)
        self.movepart(BACK_RIGHT_LEG, 140)
        self.movepart(FRONT_RIGHT_LEG, 140)




    def movepart(self, part, position):

        if position + self.corrections[part] > 180:
            position=180 - self.corrections[part]
        elif position + self.corrections[part] < 0:
            position=0 - self.corrections[part]

        if part == FRONT_RIGHT_FOOT or part == BACK_RIGHT_FOOT or part == BACK_LEFT_LEG or part == FRONT_LEFT_LEG or part == FRONT_LEFT_SHOULDER or part == BACK_RIGHT_SHOULDER:
            self.positions[part] = position
            self.servos.servo[part].angle = position + self.corrections[part]
        
        elif part == FRONT_LEFT_FOOT or part == BACK_LEFT_FOOT or part == FRONT_RIGHT_LEG or part == BACK_RIGHT_LEG or part == FRONT_RIGHT_SHOULDER or part == BACK_LEFT_SHOULDER:
            self.positions[part] = position 
            self.servos.servo[part].angle = 180 - (position + self.corrections[part])


    def wakeup(self):

        global spot_gamepadmotion

        val = list(self.positions)

        self.movepart(FRONT_LEFT_SHOULDER, 90)
        self.movepart(BACK_RIGHT_SHOULDER, 90)
        self.movepart(FRONT_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)

        sleep(0.1)


        for i in range(10):
            self.movepart(BACK_RIGHT_LEG, self.positions[BACK_RIGHT_LEG]-round((val[BACK_RIGHT_LEG] - 170)/15))
            self.movepart(BACK_LEFT_LEG, self.positions[BACK_LEFT_LEG]-round((val[BACK_LEFT_LEG] - 170)/15))
            self.movepart(BACK_RIGHT_FOOT, self.positions[BACK_RIGHT_FOOT]-round((val[BACK_RIGHT_FOOT] - 140)/15))
            self.movepart(BACK_LEFT_FOOT, self.positions[BACK_LEFT_FOOT]-round((val[BACK_LEFT_FOOT] - 140)/15))

            sleep(0.05)

        sleep(0.5)

        for i in range(5):
            self.movepart(FRONT_RIGHT_LEG, self.positions[FRONT_RIGHT_LEG]-round((val[FRONT_RIGHT_LEG] - 170)/5))
            self.movepart(FRONT_LEFT_LEG, self.positions[FRONT_LEFT_LEG]-round((val[FRONT_LEFT_LEG] - 170)/5))

            self.movepart(BACK_RIGHT_LEG, self.positions[BACK_RIGHT_LEG]-round((val[BACK_RIGHT_LEG] - 170)/15))
            self.movepart(BACK_LEFT_LEG, self.positions[BACK_LEFT_LEG]-round((val[BACK_LEFT_LEG] - 170)/15))
            self.movepart(BACK_RIGHT_FOOT, self.positions[BACK_RIGHT_FOOT]-round((val[BACK_RIGHT_FOOT] - 140)/15))
            self.movepart(BACK_LEFT_FOOT, self.positions[BACK_LEFT_FOOT]-round((val[BACK_LEFT_FOOT] - 140)/15))

            self.movepart(FRONT_RIGHT_FOOT, self.positions[FRONT_RIGHT_FOOT]-round((val[FRONT_RIGHT_FOOT] - 170)/5))
            self.movepart(FRONT_LEFT_FOOT, self.positions[FRONT_LEFT_FOOT]-round((val[FRONT_LEFT_FOOT] - 170)/5))

            sleep(0.05)

        spot_gamepadmotionlock.acquire()
        spot_gamepadmotion='stop'
        spot_gamepadmotionlock.release()


    def laydown(self):

        global spot_gamepadmotion
        
        val = list(self.positions)

        self.movepart(FRONT_LEFT_SHOULDER, 90)
        self.movepart(BACK_RIGHT_SHOULDER, 90)
        self.movepart(FRONT_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)

        sleep(0.1)


        for i in range(10):

            self.movepart(FRONT_RIGHT_LEG, self.positions[FRONT_RIGHT_LEG]-round((val[FRONT_RIGHT_LEG] - 140)/10))
            self.movepart(FRONT_LEFT_LEG, self.positions[FRONT_LEFT_LEG]-round((val[FRONT_LEFT_LEG] - 140)/10))
            self.movepart(BACK_RIGHT_LEG, self.positions[BACK_RIGHT_LEG]-round((val[BACK_RIGHT_LEG] - 140)/10))
            self.movepart(BACK_LEFT_LEG, self.positions[BACK_LEFT_LEG]-round((val[BACK_LEFT_LEG] - 140)/10))

            self.movepart(BACK_RIGHT_FOOT, self.positions[BACK_RIGHT_FOOT]-round((val[BACK_RIGHT_FOOT] - 170)/10))
            self.movepart(BACK_LEFT_FOOT, self.positions[BACK_LEFT_FOOT]-round((val[BACK_LEFT_FOOT] - 170)/10))
            self.movepart(FRONT_RIGHT_FOOT, self.positions[FRONT_RIGHT_FOOT]-round((val[FRONT_RIGHT_FOOT] - 170)/10))
            self.movepart(FRONT_LEFT_FOOT, self.positions[FRONT_LEFT_FOOT]-round((val[FRONT_LEFT_FOOT] - 170)/10))

            sleep(0.05)

        spot_gamepadmotionlock.acquire()
        spot_gamepadmotion=None
        spot_gamepadmotionlock.release()           



    def stop(self):
        global gyro_front, gyro_time, gyro_side, gyro_lock
        gyro_lock.acquire()
        gytime=gyro_time
        gyfront=gyro_front
        gyside=gyro_side
        gyro_lock.release()

        if (time() - gytime) < 0.5:
            self.stable(gyfront, gyside)
        print('Gryo : ' + str(gyfront) + ' ' + str(gyside) + ' ' + str(gytime))
        print(self.positions)

    def forward(self):
        print('Forward')

    def backward(self):
        print('Backward')


    def right(self):

        self.movepart(BACK_RIGHT_LEG, 180)
        self.movepart(BACK_LEFT_LEG, 180)

        sleep(0.2)

        self.movepart(FRONT_RIGHT_SHOULDER, 70)
        self.movepart(FRONT_LEFT_SHOULDER, 110)
        self.movepart(BACK_RIGHT_SHOULDER, 110)
        self.movepart(BACK_LEFT_SHOULDER, 70)

        sleep(0.3)

        self.movepart(BACK_LEFT_FOOT, 150)
        sleep(0.1)
        self.movepart(BACK_LEFT_SHOULDER, 120)

        sleep(0.3)

        self.movepart(BACK_RIGHT_FOOT, 180)
        sleep(0.05)
        self.movepart(BACK_RIGHT_SHOULDER, 60)
        sleep(0.1)
        self.movepart(BACK_RIGHT_FOOT, 140)

        sleep(0.3)

        self.movepart(FRONT_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)
        self.movepart(BACK_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)

        sleep(0.2)


    def left(self):

        self.movepart(BACK_RIGHT_LEG, 180)
        self.movepart(BACK_LEFT_LEG, 180)

        sleep(0.2)

        self.movepart(FRONT_RIGHT_SHOULDER, 110)
        self.movepart(FRONT_LEFT_SHOULDER, 70)
        self.movepart(BACK_RIGHT_SHOULDER, 70)
        self.movepart(BACK_LEFT_SHOULDER, 110)

        sleep(0.3)

        self.movepart(BACK_RIGHT_FOOT, 150)
        sleep(0.1)
        self.movepart(BACK_RIGHT_SHOULDER, 120)

        sleep(0.3)

        self.movepart(BACK_LEFT_FOOT, 190)
        sleep(0.05)
        self.movepart(BACK_LEFT_SHOULDER, 60)
        sleep(0.1)
        self.movepart(BACK_LEFT_FOOT, 140)

        sleep(0.3)

        self.movepart(FRONT_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)
        self.movepart(BACK_RIGHT_SHOULDER, 90)
        self.movepart(BACK_LEFT_SHOULDER, 90)

        sleep(0.2)


    def bodyleft(self):
        print('Body Left')

    def bodyright(self):
        print('Body Right')

    def bodyfront(self):
        print('Body Front')

    def bodyback(self):
        print('Body Back')

    def stable(self, front, side):

        if front < -0.3:
            self.movepart(FRONT_RIGHT_FOOT, self.positions[FRONT_RIGHT_FOOT] + abs(round(front*1.5)))
            self.movepart(FRONT_LEFT_FOOT, self.positions[FRONT_LEFT_FOOT] + abs(round(front*1.5)))
            self.movepart(FRONT_RIGHT_LEG, self.positions[FRONT_RIGHT_LEG] + abs(round(front*1.5)))
            self.movepart(FRONT_LEFT_LEG, self.positions[FRONT_LEFT_LEG] + abs(round(front*1.5)))

        if front > 0.3:
            self.movepart(FRONT_RIGHT_FOOT, self.positions[FRONT_RIGHT_FOOT] - abs(round(front*1.5)))
            self.movepart(FRONT_LEFT_FOOT, self.positions[FRONT_LEFT_FOOT] - abs(round(front*1.5)))
            self.movepart(FRONT_RIGHT_LEG, self.positions[FRONT_RIGHT_LEG] - abs(round(front*1.5)))
            self.movepart(FRONT_LEFT_LEG, self.positions[FRONT_LEFT_LEG] - abs(round(front*1.5)))

        if side > 0.3:
            self.movepart(FRONT_RIGHT_FOOT, self.positions[FRONT_RIGHT_FOOT] + abs(round(side*1.5)))
            self.movepart(FRONT_RIGHT_LEG, self.positions[FRONT_RIGHT_LEG] + abs(round(side*1.5)))
            self.movepart(BACK_RIGHT_FOOT, self.positions[BACK_RIGHT_FOOT] + abs(round(side*1.5)))
            self.movepart(BACK_RIGHT_LEG, self.positions[BACK_RIGHT_LEG] + abs(round(side*1.5)))

            self.movepart(FRONT_LEFT_FOOT, self.positions[FRONT_LEFT_FOOT] - abs(round(side*1.5)))
            self.movepart(FRONT_LEFT_LEG, self.positions[FRONT_LEFT_LEG] - abs(round(side*1.5)))
            self.movepart(BACK_LEFT_FOOT, self.positions[BACK_LEFT_FOOT] - abs(round(side*1.5)))
            self.movepart(BACK_LEFT_LEG, self.positions[BACK_LEFT_LEG] - abs(round(side*1.5)))

        if side < -0.3:
            self.movepart(FRONT_RIGHT_FOOT, self.positions[FRONT_RIGHT_FOOT] - abs(round(side*1.5)))
            self.movepart(FRONT_RIGHT_LEG, self.positions[FRONT_RIGHT_LEG] - abs(round(side*1.5)))
            self.movepart(BACK_RIGHT_FOOT, self.positions[BACK_RIGHT_FOOT] - abs(round(side*1.5)))
            self.movepart(BACK_RIGHT_LEG, self.positions[BACK_RIGHT_LEG] - abs(round(side*1.5)))

            self.movepart(FRONT_LEFT_FOOT, self.positions[FRONT_LEFT_FOOT] + abs(round(side*1.5)))
            self.movepart(FRONT_LEFT_LEG, self.positions[FRONT_LEFT_LEG] + abs(round(side*1.5)))
            self.movepart(BACK_LEFT_FOOT, self.positions[BACK_LEFT_FOOT] + abs(round(side*1.5)))
            self.movepart(BACK_LEFT_LEG, self.positions[BACK_LEFT_LEG] + abs(round(side*1.5)))

        sleep(0.1)


if __name__ == '__main__':


    # Create Gyro thread
    gyro_thread = threading.Thread(name='spotgyro', target=spotgyro)
    gyro_thread.setDaemon(True)
    gyro_thread.start()

    # Create Gamedpad thread
    spotgamepad_thread = threading.Thread(name='spotgamepad', target=spotgamepad)
    spotgamepad_thread.setDaemon(True)
    spotgamepad_thread.start()

    spot=Spot()

    while all_run:
        sleep(0.1)
        spot_gamepadmotionlock.acquire()
        action=spot_gamepadmotion
        spot_gamepadmotionlock.release()
        if action == 'stop':
            spot.stop()
        elif action == 'forward':
            spot.forward()
        elif action == 'backward':
            spot.backward()
        elif action == 'left':
            spot.left()
        elif action == 'right':
            spot.right()
        elif action == 'bodyright':
            spot.bodyright()
        elif action == 'bodyleft':
            spot.bodyleft()
        elif action == 'bodyfront':
            spot.bodyfront()
        elif action == 'bodyback':
            spot.bodyback()
        elif action == 'wakeup':
            spot.wakeup()
        elif action == 'laydown':
            spot.laydown()
        


    gyro_thread.join()
    spotgamepad_thread.join()

